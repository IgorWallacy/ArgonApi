package com.doks.conferencia.repository;

import com.doks.conferencia.model.Recebimento;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.time.LocalDate;
import java.util.List;

public interface RecebimentoRepository extends JpaRepository<Recebimento , Integer> {


    @Query(value="select t3.codigo as codigo_cliente,CONCAT('Código: ' || t3.codigo || '-' || t3.nome || '-' || 'CPF: ' || t3.cnpjcpf ) AS nome_cliente,t3.cnpjcpf as cnpjcpf,t2.documento as documento,t2.id as evento,t4.codigo as codigofilial,t5.descricao as tipo,t2.emissao as emissao,t2.vencimento as vencimento,t2.valor as valor,t2.saldo as saldo,t1.valor as valor_pago,t1.desconto as desconto,t1.juros as juros_pago,t1.multa as multa_paga,t1.pagamento as pagamento,t2.tipoorigem as tipoorigem,t6.numeronotafiscal as numeronotafiscal,t6.serie as modelonota,t7.numeronfce as numeronfce,t7.coo as coo,t7.satserie as satserie,t9.nome as usuariomovimentacao,t4.nome as loja,(select descricaoContaCorrentet2.descricao from contacorrentelancamento descricaoContaCorrentet1 left join contacorrente descricaoContaCorrentet2 on (descricaoContaCorrentet2.id=descricaoContaCorrentet1.idcontacorrente) where descricaoContaCorrentet1.evento=t1.evento limit 1) as descricaoContaCorrente from financeirolancamento t1 left join financeiro t2 on (t2.id=t1.idfinanceiro) left join entidade t3 on (t3.id=t2.identidade) left join filial t4 on (t4.id=t2.idfilial) left join tipodocumentofinanceiro t5 on (t5.id=t2.idtipodocumentofinanceiro) left join notafiscal t6 on (t6.id=t2.idorigem) left join operacao t7 on (t7.id=t2.idorigem) left join eventofinanceiro t8 on (t8.id=t1.evento) left join usuario t9 on (t9.id=t8.idusuario) where t2.tipo='R' and t1.cancelado=0 and t1.pagamento>=?1 and t1.pagamento<=?2 and t1.valor>0 ", nativeQuery = true)
    List<Recebimento> porPagamento(LocalDate dataI, LocalDate dataF);
    @Query(value="select t3.codigo as codigo_cliente,CONCAT('Código: ' || t3.codigo || '-' || t3.nome || '-' || 'CPF: ' || t3.cnpjcpf ) AS nome_cliente,t3.cnpjcpf as cnpjcpf,t2.documento as documento,t2.id as evento,t4.codigo as codigofilial,t5.descricao as tipo,t2.emissao as emissao,t2.vencimento as vencimento,t2.valor as valor,t2.saldo as saldo,t1.valor as valor_pago,t1.desconto as desconto,t1.juros as juros_pago,t1.multa as multa_paga,t1.pagamento as pagamento,t2.tipoorigem as tipoorigem,t6.numeronotafiscal as numeronotafiscal,t6.serie as modelonota,t7.numeronfce as numeronfce,t7.coo as coo,t7.satserie as satserie,t9.nome as usuariomovimentacao,t4.nome as loja,(select descricaoContaCorrentet2.descricao from contacorrentelancamento descricaoContaCorrentet1 left join contacorrente descricaoContaCorrentet2 on (descricaoContaCorrentet2.id=descricaoContaCorrentet1.idcontacorrente) where descricaoContaCorrentet1.evento=t1.evento limit 1) as descricaoContaCorrente from financeirolancamento t1 left join financeiro t2 on (t2.id=t1.idfinanceiro) left join entidade t3 on (t3.id=t2.identidade) left join filial t4 on (t4.id=t2.idfilial) left join tipodocumentofinanceiro t5 on (t5.id=t2.idtipodocumentofinanceiro) left join notafiscal t6 on (t6.id=t2.idorigem) left join operacao t7 on (t7.id=t2.idorigem) left join eventofinanceiro t8 on (t8.id=t1.evento) left join usuario t9 on (t9.id=t8.idusuario) where t2.tipo='R' and t1.cancelado=0 and t1.pagamento>=?1 and t1.pagamento<=?2 and t1.valor>0 and t2.idfilial in (?3) and t8.idfilial in (?3)  ", nativeQuery = true)
    List<Recebimento> porPagamentoLolja(LocalDate parse, LocalDate parse1, Integer loja);
}
